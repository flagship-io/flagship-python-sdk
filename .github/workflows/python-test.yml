## This workflow will install Python dependencies, run tests and lint with a variety of Python versions
## For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
#
#name: Python test
#
#on: workflow_dispatch
#
#jobs:
#  build:
#    env:
#      FLAGSHIP_VERSION_NAME: ${GITHUB_REF/refs\/tags\//}
#    runs-on: ubuntu-latest
#    #runs-on: ubuntu-20.04
#    strategy:
#      matrix:
#        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
#    steps:
#    - uses: actions/checkout@v2
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v3
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Env
#      run: |
#          echo ::exportVariable name=FLAGSHIP_VERSION_NAME::${GITHUB_REF/refs\/tags\//}
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade --no-cache-dir pip
#        pip install pytest
#        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#        mkdir -p cache
#    - name: Test with pytest
#      run: |
#        python -m pytest
#
#

# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python test

on: workflow_dispatch

jobs:
  test:
    strategy:
      matrix:
        os: [ "ubuntu-latest ]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: poetry install --no-interaction
      - name: Test with pytest
        run: poetry run pytest --cov=<project-dir> --cov-report=xml

